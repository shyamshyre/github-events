name: EventsDemo-Pipeline
on:
  workflow_dispatch:
    
  pull_request: 
    types: [opened, reopened] #Activity Types
    branches:
    - 'main/**' # This will trigger if the branches are only from main .
    - 'dev/**'
    paths: 
    - '*.yml'  # By adding paths to the types will consider it as condition.
               # In this case it will only consider the changes for yaml files and pull request is opened.  
  push:
    branches:
    - '**main' 
    paths:
    - '**pipeline.yml' # ** is mandatory if not the pipeline will not consider it. pipleine will not be considered.
jobs:
  test:
    runs-on: ubuntu-latest
    # Capturng the step related output defined down below.
    # publish (id) is the key identifier that identifies the step.
    # outputs:
      # script-file:  ${{steps.publish.outputs.output-file}}
    steps:
      - name: Output event data
        run: echo "${{ toJSON(github.event) }}"
      - name: Get code
        uses: actions/checkout@v3
      - name: Caching dependencies
        uses: actions/cache@v3
        with: 
          # This predeominanly used for caching, we are caching the npm modules that are getting generated in the ubuntu container.
          # path is the location where we are specify the content to cache.          
          path: ~/.npm
          # Need to have key with a dynamic value, which tell to have / pick the updated version of cache.
          # in the beloe case the a hashfile is generate for package-lock.json
          # if there is any change in the file, the hash get's updated.
          key: deps-node-modules-${{ hashFiles('**/package-lock.json')}}
      - name: Install dependencies
        run: npm ci
      - name: Test code
        run: npm run test
 

  build:
    runs-on: ubuntu-latest
    outputs:
      script-file:  ${{steps.publish.outputs.output-file}}
    needs: test
    steps:
      - name: pull the code
        uses: actions/checkout@v3
      - name: Caching dependencies
        uses: actions/cache@v3
        with: 
          # This predeominanly used for caching, we are caching the npm modules that are getting generated in the ubuntu container.
          # path is the location where we are specify the content to cache.          
          path: ~/.npm
          # Need to have key with a dynamic value, which tell to have / pick the updated version of cache.
          # in the beloe case the a hashfile is generate for package-lock.json
          # if there is any change in the file, the hash get's updated.
          key: deps-node-modules-${{ hashFiles('**/package-lock.json')}}
      - name: Install dependencies
        run: npm ci
      - name: Run Test
        run: npm run test
      - name: Build the product
        run: npm run build
      - name: Upload output files
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: dist
      - name: Publish the files
        # The below command will list down the filename , and we are trying to capture the filename and pass it to the subsesquent job.
        # above steps will fetch the vlaue from id
        id: publish
        # output-file is the variable name which holds the file name. 
        # The below command will execute and write filename to a file GITHUB_OUTPUT, where the value be passed as an input to the above output.
        run: find dist/assets/*.js -type f -execdir echo 'output-file={}' >> $GITHUB_OUTPUT ';'


  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: pull the code
        uses: actions/checkout@v3
      - name: manage the cache.
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json')}}
      - name: build project
        run: npm run build
      # - name: Install dependencies
      #  run : npm ci
      - name: Download the files
        uses: actions/download-artifact@v3
        with:
          name: dist-files
      - name: Display File name from the previous job
        # needs - > Context variable, build -> the parentjob, output-> property from github action, script-file -> Value/Variable from the previous step outputs.
        run: echo "${{needs.build.outputs.script-file}}"
      - name: Display structure of downloaded files
        run: ls -R

      - name: deployment
        run: echo "Deployment in Progress"




          
        
